AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation template for WordPress deployment

Parameters:

  DBName:
    Description: The WordPress database name
    Type: String
    Default: wordpress

  DBUser:
    Description: The WordPress database admin account username
    Type: String
    Default: wpuser
  
  DBPassword:
    Description: The WordPress database admin account password
    Type: String
    NoEcho: true

  DBAllocatedStorage:
    Description: The size of the database (Gb)
    Type: Number
    Default: 20

  InstanceType:
    Description: The EC2 instance type
    Type: String
    Default: t2.micro  
    AllowedValues: [t2.micro, t2.small, t2.medium]

  KeyName:
    Description: Name of an existing EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

Resources:

  DBSubnetGroup: 
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS DB instance
      SubnetIds: 
        - subnet-xxxxxxxx
        - subnet-yyyyyyyy

  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: mariadb
      EngineVersion: 10.4.17
      AllocatedStorage: !Ref DBAllocatedStorage 
      DBInstanceClass: db.t3.micro
      DBName:  !Ref DBName
      MasterUsername: !Ref DBUser  
      MasterUserPassword: !Ref DBPassword

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable MySQL access via port 3306
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
      VpcId: vpc-xxxxxxxx
  
  WPSecurityGroup:
    Type: AWS::EC2::SecurityGroup  
    Properties:    
      GroupDescription: Enable HTTP access via port 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      VpcId: vpc-xxxxxxxx

  LinuxInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-xxxxxxxx
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref WPSecurityGroup
      UserData: 
        Fn::Base64:
          !Sub |
            #!/bin/bash
            yum update -y
            amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
            yum install -y httpd mariadb-server
            systemctl start httpd
            systemctl enable httpd
            usermod -a -G apache ec2-user
            chown -R ec2-user:apache /var/www
            chmod 2775 /var/www
            find /var/www -type d -exec chmod 2775 {} \;
            find /var/www -type f -exec chmod 0664 {} \;
            echo "<?php phpinfo(); ?>" > /var/www/html/phpinfo.php
            
            wget https://wordpress.org/wordpress-${Version}.tar.gz
            tar -xzf wordpress-${Version}.tar.gz
            cp -r wordpress/* /var/www/html/
            rm -rf wordpress
            rm -rf wordpress-${Version}.tar.gz
            chown -R apache:apache /var/www/html/
            
            systemctl start mariadb
            mysqladmin -u root password '${DBPassword}'
            mysql -u root --password='${DBPassword}' << SQL_COMMANDS 
            CREATE DATABASE ${DBName};
            GRANT ALL PRIVILEGES ON ${DBName}.* TO '${DBUser}'@'localhost' IDENTIFIED BY '${DBPassword}';
            FLUSH PRIVILEGES;
            SQL_COMMANDS
            
            systemctl restart httpd
            
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref LinuxInstance

Outputs:
  WebsiteURL:
    Value: !Join ["", ["http://", !GetAtt EIP.PublicIp]]